Document everything.

Move all of the naming conventions that could clash to a single place.
Check that no clashes are possible.

Deal with parameterized type definitions.
  Both local and nonlocal.

Generate iter, based on the generic visitor,
  by instantiating the ascending methods to always return ().

Generate map, based on the generic visitor,
  by instantiating the ascending methods to always reconstruct a tree node.

Reproduce everything at arity 2 (visitor2, iter2, map2).

Think about compositionality.
  By multiple inheritance?

Think about transforming a closed recursive type definition into an open one.

Inline records cannot be supported in a satisfactory way,
  since there is no way of writing a descending auxiliary method
  whose argument is known to have a certain tag.

Tuples cannot be supported in a satisfactory way,
  as we would need to generate ascending method names
  based on the types of the tuple components. Ugly.
At least, they cannot be supported in the generic visitor.
  They could be supported directly in iter and map,
  if they do not inherit from the generic visitor.

Write a README.

Show to Fran√ßois Bobot.

Add a LICENSE. Announce.
