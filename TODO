------------------------------------------------------------------------------

TODO (REALLY)

Show to:
  François Bobot, Virgile Prevosto.
  Andrei Paskevich, Jean-Christophe Filliâtre.
  Andrew Kennedy.
  Benjamin Farinier.
  Thomas Braibant.
  Thibaut Balabonski.
  Yann Régis-Gianas.

Create an opam package. Dependency on 4.03. Note @@unboxed requires 4.04.
  Dependencies on other packages for tests: hashcons, core_bench...
  Run these tests only if these packages are installed, warn otherwise?

Announce.

------------------------------------------------------------------------------

TODO (PERHAPS)

If [iter], [map], etc. inherited from [fold],
  with implementations of the [build_] methods,
  then it would be possible to override one of these methods
  to obtain custom behavior.

Develop a real test suite, with expected output.
  Check for left-to-right traversal order.

Add [opaque] as an option, carrying a list of types.
  That would be lighter than writing [@opaque] at every occurrence.

Include an option [except] to omit the definition of certain methods.
  That would allow the user to provide their own implementation,
  (possibly inherited / polymorphic),
  without having to satisfy the type constraints imposed by our implementation.

Detect and reject existential types and GADTs.

Could define a fold visitor where the methods receive the names of the types,
data constructors, and record fields that are being visited. (As in
ppx_tools/genlifter.)

Avoid generating beta-redexes.
  (fun (x, y) -> ...) z should be let (x, y) = z in ...
  See [visit_types].

Re-introduce hoisting of closure allocations of the form [self#visit_foo]?
  If so, share them when they have several occurrences.

[variety] could be a list.
  But then, one would need to replace <variety> with variety in
    [ancestors] and in [name] (if present).
  Somewhat tricky, as we would need to produce not one settings
    record, but several of them.

Implement a way of deferring visitor generation.
  (inserting user code between the type definition and the visitor class)
  (or, more generally, generating a visitor for a pre-existing type)

Might wish to allow ancestors to be not just class names
  but class expressions (e.g. a class name applied to some values).

Do something about ~path?
  It seems connected to nested modules.
