------------------------------------------------------------------------------

TODO (REALLY)

If there are no virtual methods, then we can produce a let rec nest
  instead of a class definition.

Avoid generating beta-redexes.
  (fun (x, y) -> ...) z should be let (x, y) = z in ...

Benchmark.
  Compare the speed of visitor-based code w.r.t. a recursive function.

Test on the Frama-C AST.
  Instantiate visit_'term and visit_'locs and make sure we have working code.

Develop support for names and binders.
  Try to make it a functor, i.e., independent of the structure of terms.
  Do we need private methods?

Try dealing with binding and hash-consing at the same time.

Try dealing with suspended substitutions.
  (As a distinct construct. Not necessarily at abstractions.)

Document everything.
  The name [VisitorsRuntime] must not be shadowed.

Show to Fran√ßois Bobot and Virgile Prevosto.
Show to Andrei and Jean-Christophe.
Add a LICENSE.
Create an opam package. Dependency on 4.03. Note @@unboxed requires 4.04.
  Dependencies on other packages for tests: hashcons, core_bench...
  Run these tests only if these packages are installed, warn otherwise?
Announce.

------------------------------------------------------------------------------

TODO (PERHAPS)

Implement a way of deferring visitor generation.
  (inserting user code between the type definition and the visitor class)

Generate a variant of "iter" with an explicit accumulator?
  Would allow getting rid of mutable variables in user code.

Generate a (bottom-up) "fold" class in addition to iter and map?
  Should not be difficult.
  Create virtual methods for local types. Use external functions for nonlocal types.
    Do something about tuples. (Reconstruct them identically?)
  Analogous to ppx_tools/genlifter.
  Would allow the user to define subclasses, possibly in several steps. Could be useful.

Do something about ~path?
  It seems connected to nested modules.

Think about automatically transforming a closed recursive type definition into an open one.
