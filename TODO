------------------------------------------------------------------------------

TODO (REALLY)

Treat all primitive atomic types as implicitly opaque?
  (in which case they should not be shadowed)
  (in which case we might wish to add @transparent)
Or, better, add [opaque] as an option, carrying a list of types.

Remove support for primitive atomic types in VisitorsRuntime?

Decide what to put in the class VisitorsRuntime.fold.
  Provide no methods at all, so we do not fix the types of these methods?
    Let the user provide their own methods via [ancestors].

Include an option [except] to omit the definition of certain methods.
  That would allow the user to provide their own implementation,
  (possibly inherited / polymorphic),
  without having to satisfy the type constraints imposed by our implementation.

Decide if hoisting is a good idea.
  Benchmark it on a real application?
  If we do keep it, try to share identical definitions.

Benchmark with flambda.
  Check if the compiler is able to avoid the closure allocations.
  Decide if the inlining tricks in VisitorsRuntime are worth the trouble.

Develop a real test suite, with expected output.
  Check for left-to-right traversal order.

Hunt TEMPORARY.

Document everything.

Show to:
  François Bobot, Virgile Prevosto.
  Andrei Paskevich, Jean-Christophe Filliâtre.
  Andrew Kennedy.
  Benjamin Farinier.
  Thomas Braibant.

Add a LICENSE.
Create an opam package. Dependency on 4.03. Note @@unboxed requires 4.04.
  Dependencies on other packages for tests: hashcons, core_bench...
  Run these tests only if these packages are installed, warn otherwise?
Announce.

------------------------------------------------------------------------------

TODO (PERHAPS)

Avoid generating beta-redexes.
  (fun (x, y) -> ...) z should be let (x, y) = z in ...

[variety] could be a list.
  But then, one would need to replace <variety> with variety in
    [ancestors] and in [name] (if present).
  Somewhat tricky, as we would need to produce not one settings
    record, but several of them.

Implement a way of deferring visitor generation.
  (inserting user code between the type definition and the visitor class)
  (or, more generally, generating a visitor for a pre-existing type)

Might wish to allow ancestors to be not just class names
  but class expressions (e.g. a class name applied to some values).

Do something about ~path?
  It seems connected to nested modules.
